// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Top Crush",
    "version": "0.1.0"
  },
  "paths": {
    "/matches": {
      "get": {
        "tags": [
          "matches"
        ],
        "responses": {
          "201": {
            "description": "Get a list of matches 15 mathces",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "402": {
            "description": "subscription requerid",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "create a new user",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "description": "update the user information",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Uploaded",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/location": {
      "put": {
        "description": "update user position",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/position"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Update",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/upload": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "produce a pre-signed link for upload",
            "schema": {
              "$ref": "#/definitions/preSignedLink"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "images": {
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "uploadDate": {
          "type": "string",
          "format": "date"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "position": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float64",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "type": "number",
          "format": "float64",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "preSignedLink": {
      "properties": {
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "user": {
      "type": "object",
      "required": [
        "fullName",
        "interestIn",
        "gender",
        "birthDate",
        "radio"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "age": {
          "type": "integer",
          "format": "int64"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "company": {
          "type": "string",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "maxLength": 4096
        },
        "fullName": {
          "type": "string",
          "maxLength": 256,
          "minLength": 10
        },
        "gender": {
          "enum": [
            "male",
            "female"
          ]
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/images"
          }
        },
        "interestIn": {
          "enum": [
            "male",
            "female"
          ]
        },
        "jobTitle": {
          "type": "string",
          "maxLength": 256
        },
        "lastBirthDateChange": {
          "description": "is the last time the user change it birthDate, user cannot change it a high frequency",
          "type": "string",
          "format": "date"
        },
        "lastPosition": {
          "$ref": "#/definitions/position"
        },
        "radio": {
          "description": "distance in km to find matches",
          "type": "integer",
          "format": "uint64",
          "maximum": 30,
          "minimum": 1
        },
        "school": {
          "type": "string",
          "maxLength": 256
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Top Crush",
    "version": "0.1.0"
  },
  "paths": {
    "/matches": {
      "get": {
        "tags": [
          "matches"
        ],
        "responses": {
          "201": {
            "description": "Get a list of matches 15 mathces",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "402": {
            "description": "subscription requerid",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "create a new user",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "description": "update the user information",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Uploaded",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/location": {
      "put": {
        "description": "update user position",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/position"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Update",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/upload": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "produce a pre-signed link for upload",
            "schema": {
              "$ref": "#/definitions/preSignedLink"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "images": {
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "uploadDate": {
          "type": "string",
          "format": "date"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "position": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float64",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "type": "number",
          "format": "float64",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "preSignedLink": {
      "properties": {
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "user": {
      "type": "object",
      "required": [
        "fullName",
        "interestIn",
        "gender",
        "birthDate",
        "radio"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "age": {
          "type": "integer",
          "format": "int64"
        },
        "birthDate": {
          "type": "string",
          "format": "date"
        },
        "company": {
          "type": "string",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "maxLength": 4096
        },
        "fullName": {
          "type": "string",
          "maxLength": 256,
          "minLength": 10
        },
        "gender": {
          "enum": [
            "male",
            "female"
          ]
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/images"
          }
        },
        "interestIn": {
          "enum": [
            "male",
            "female"
          ]
        },
        "jobTitle": {
          "type": "string",
          "maxLength": 256
        },
        "lastBirthDateChange": {
          "description": "is the last time the user change it birthDate, user cannot change it a high frequency",
          "type": "string",
          "format": "date"
        },
        "lastPosition": {
          "$ref": "#/definitions/position"
        },
        "radio": {
          "description": "distance in km to find matches",
          "type": "integer",
          "format": "uint64",
          "maximum": 30,
          "minimum": 1
        },
        "school": {
          "type": "string",
          "maxLength": 256
        }
      }
    }
  }
}`))
}
