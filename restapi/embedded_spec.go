// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Top Crush",
    "version": "0.1.0"
  },
  "paths": {
    "/chat/messages/{id}": {
      "put": {
        "description": "send a message in a chat",
        "tags": [
          "chat"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "description": "chat id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "message submited",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/chat/messages/{id}/{messageIndex}": {
      "get": {
        "description": "return all message from messageIndex",
        "tags": [
          "chat"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "description": "chat id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "this is last retrived message",
            "name": "messageIndex",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of messages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/all": {
      "get": {
        "description": "return a list of all matchs",
        "tags": [
          "matchs"
        ],
        "responses": {
          "201": {
            "description": "a list of users and chats",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "chatID": {
                    "type": "string",
                    "format": "ObjectId"
                  },
                  "user": {
                    "$ref": "#/definitions/userPublic"
                  }
                }
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/delete": {
      "delete": {
        "description": "umatch user",
        "tags": [
          "matchs"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the other user",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {},
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/likes": {
      "get": {
        "description": "all persons who like me",
        "tags": [
          "matchs"
        ],
        "responses": {
          "201": {
            "description": "list of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userPublic"
              }
            }
          },
          "402": {
            "description": "subscription required",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/boast": {
      "put": {
        "description": "make a boast",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "boast worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more boasts",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/like": {
      "put": {
        "description": "make a like",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "like worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more likes",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/superlike": {
      "put": {
        "description": "make a superlike",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "matchID",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "superlike worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more superlikes avaliable",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/users": {
      "get": {
        "description": "return a list of near users",
        "tags": [
          "slide"
        ],
        "responses": {
          "201": {
            "description": "return a list of near users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userPublic"
              }
            }
          },
          "402": {
            "description": "subscription requerid",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "return the user information",
        "tags": [
          "user"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "create a new user",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/upload": {
      "get": {
        "description": "get a image upload link\\nYou should add this link to the user images array and submit the user\\nif you want to upload a facebook photo put it CDN link the the array (the server will made a local copy)",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "produce a pre-signed link for upload",
            "schema": {
              "$ref": "#/definitions/preSignedLink"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "description": "update the user information",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Uploaded",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/location": {
      "put": {
        "description": "update user position",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/position"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Update"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "chat": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/message"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ObjectId",
            "readOnly": true
          }
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "images": {
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "uploadDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "message": {
      "type": "object",
      "required": [
        "from",
        "text"
      ],
      "properties": {
        "from": {
          "description": "id of the user who write the message",
          "type": "string",
          "format": "ObjectId"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "position": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float64",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "type": "number",
          "format": "float64",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "preSignedLink": {
      "properties": {
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "principal": {
      "description": "save user session information",
      "type": "object",
      "properties": {
        "authMode": {
          "type": "string",
          "enum": [
            "AccountKit",
            "Facebook"
          ]
        },
        "facebookID": {
          "type": "string"
        },
        "facebookToken": {
          "type": "string"
        }
      }
    },
    "success": {
      "type": "string",
      "default": "OK"
    },
    "userBasic": {
      "description": "this user information is public",
      "required": [
        "fullName",
        "interestIn",
        "gender"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "maxLength": 4096
        },
        "fullName": {
          "type": "string",
          "maxLength": 256,
          "minLength": 10
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/images"
          }
        },
        "interestIn": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "jobTitle": {
          "type": "string",
          "maxLength": 256
        },
        "school": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "userInternal": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userPrivate"
        },
        {
          "properties": {
            "deslikes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            },
            "facebookID": {
              "type": "string"
            },
            "likes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            },
            "superlikes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            }
          }
        }
      ]
    },
    "userPrivate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userBasic"
        },
        {
          "properties": {
            "birthDate": {
              "type": "string",
              "format": "date"
            },
            "boasts": {
              "type": "array",
              "items": {
                "description": "when the boast finish",
                "type": "string",
                "format": "date-time"
              },
              "readOnly": true
            },
            "lastBirthDateChange": {
              "description": "is the last time the user change it birthDate, user cannot change it a high frequency",
              "type": "string",
              "format": "date",
              "readOnly": true
            },
            "lastPosition": {
              "$ref": "#/definitions/position"
            },
            "matchs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "chatID": {
                    "description": "chat ID",
                    "type": "string",
                    "format": "ObjectId"
                  },
                  "userID": {
                    "description": "match user id",
                    "type": "string",
                    "format": "ObjectId"
                  }
                }
              },
              "readOnly": true
            },
            "radio": {
              "description": "distance in km to find matches",
              "type": "integer",
              "format": "uint64",
              "maximum": 30,
              "minimum": 1
            },
            "remaningBoasts": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "remaningLikes": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "remaningSuperlikes": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            }
          }
        }
      ]
    },
    "userPublic": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userBasic"
        },
        {
          "properties": {
            "age": {
              "type": "integer",
              "format": "int64",
              "maximum": 120,
              "minimum": 18
            },
            "distance": {
              "description": "distance in km",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "description": "should return ` + "`" + `AuthMode Token` + "`" + `",
      "type": "apiKey",
      "name": "Token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": null
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Top Crush",
    "version": "0.1.0"
  },
  "paths": {
    "/chat/messages/{id}": {
      "put": {
        "description": "send a message in a chat",
        "tags": [
          "chat"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "description": "chat id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "message submited",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/chat/messages/{id}/{messageIndex}": {
      "get": {
        "description": "return all message from messageIndex",
        "tags": [
          "chat"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "description": "chat id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "uint64",
            "description": "this is last retrived message",
            "name": "messageIndex",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of messages",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/all": {
      "get": {
        "description": "return a list of all matchs",
        "tags": [
          "matchs"
        ],
        "responses": {
          "201": {
            "description": "a list of users and chats",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "chatID": {
                    "type": "string",
                    "format": "ObjectId"
                  },
                  "user": {
                    "$ref": "#/definitions/userPublic"
                  }
                }
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/delete": {
      "delete": {
        "description": "umatch user",
        "tags": [
          "matchs"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the other user",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {},
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/matchs/likes": {
      "get": {
        "description": "all persons who like me",
        "tags": [
          "matchs"
        ],
        "responses": {
          "201": {
            "description": "list of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userPublic"
              }
            }
          },
          "402": {
            "description": "subscription required",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/boast": {
      "put": {
        "description": "make a boast",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "boast worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more boasts",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/like": {
      "put": {
        "description": "make a like",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "like worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more likes",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/superlike": {
      "put": {
        "description": "make a superlike",
        "tags": [
          "slide"
        ],
        "parameters": [
          {
            "name": "matchID",
            "in": "body",
            "schema": {
              "description": "the id of the match",
              "type": "string",
              "format": "ObjectId",
              "readOnly": true
            }
          }
        ],
        "responses": {
          "201": {
            "description": "superlike worked",
            "schema": {
              "$ref": "#/definitions/success"
            }
          },
          "402": {
            "description": "no more superlikes avaliable",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/slide/users": {
      "get": {
        "description": "return a list of near users",
        "tags": [
          "slide"
        ],
        "responses": {
          "201": {
            "description": "return a list of near users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userPublic"
              }
            }
          },
          "402": {
            "description": "subscription requerid",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "return the user information",
        "tags": [
          "user"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "create a new user",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/upload": {
      "get": {
        "description": "get a image upload link\\nYou should add this link to the user images array and submit the user\\nif you want to upload a facebook photo put it CDN link the the array (the server will made a local copy)",
        "tags": [
          "user"
        ],
        "responses": {
          "200": {
            "description": "produce a pre-signed link for upload",
            "schema": {
              "$ref": "#/definitions/preSignedLink"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "description": "update the user information",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Uploaded",
            "schema": {
              "$ref": "#/definitions/userPrivate"
            }
          },
          "403": {
            "description": "Forbidde",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Generic error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}/location": {
      "put": {
        "description": "update user position",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "ObjectId",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/position"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Update"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "chat": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/message"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ObjectId",
            "readOnly": true
          }
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "images": {
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "uploadDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "message": {
      "type": "object",
      "required": [
        "from",
        "text"
      ],
      "properties": {
        "from": {
          "description": "id of the user who write the message",
          "type": "string",
          "format": "ObjectId"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "position": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "float64",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "type": "number",
          "format": "float64",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "preSignedLink": {
      "properties": {
        "url": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "principal": {
      "description": "save user session information",
      "type": "object",
      "properties": {
        "authMode": {
          "type": "string",
          "enum": [
            "AccountKit",
            "Facebook"
          ]
        },
        "facebookID": {
          "type": "string"
        },
        "facebookToken": {
          "type": "string"
        }
      }
    },
    "success": {
      "type": "string",
      "default": "OK"
    },
    "userBasic": {
      "description": "this user information is public",
      "required": [
        "fullName",
        "interestIn",
        "gender"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "format": "ObjectId",
          "readOnly": true
        },
        "company": {
          "type": "string",
          "maxLength": 256
        },
        "description": {
          "type": "string",
          "maxLength": 4096
        },
        "fullName": {
          "type": "string",
          "maxLength": 256,
          "minLength": 10
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/images"
          }
        },
        "interestIn": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ]
        },
        "jobTitle": {
          "type": "string",
          "maxLength": 256
        },
        "school": {
          "type": "string",
          "maxLength": 256
        }
      }
    },
    "userInternal": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userPrivate"
        },
        {
          "properties": {
            "deslikes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            },
            "facebookID": {
              "type": "string"
            },
            "likes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            },
            "superlikes": {
              "type": "array",
              "items": {
                "description": "match user id",
                "type": "string",
                "format": "ObjectId"
              },
              "readOnly": true
            }
          }
        }
      ]
    },
    "userPrivate": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userBasic"
        },
        {
          "properties": {
            "birthDate": {
              "type": "string",
              "format": "date"
            },
            "boasts": {
              "type": "array",
              "items": {
                "description": "when the boast finish",
                "type": "string",
                "format": "date-time"
              },
              "readOnly": true
            },
            "lastBirthDateChange": {
              "description": "is the last time the user change it birthDate, user cannot change it a high frequency",
              "type": "string",
              "format": "date",
              "readOnly": true
            },
            "lastPosition": {
              "$ref": "#/definitions/position"
            },
            "matchs": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "chatID": {
                    "description": "chat ID",
                    "type": "string",
                    "format": "ObjectId"
                  },
                  "userID": {
                    "description": "match user id",
                    "type": "string",
                    "format": "ObjectId"
                  }
                }
              },
              "readOnly": true
            },
            "radio": {
              "description": "distance in km to find matches",
              "type": "integer",
              "format": "uint64",
              "maximum": 30,
              "minimum": 1
            },
            "remaningBoasts": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "remaningLikes": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "remaningSuperlikes": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            }
          }
        }
      ]
    },
    "userPublic": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/userBasic"
        },
        {
          "properties": {
            "age": {
              "type": "integer",
              "format": "int64",
              "maximum": 120,
              "minimum": 18
            },
            "distance": {
              "description": "distance in km",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "description": "should return ` + "`" + `AuthMode Token` + "`" + `",
      "type": "apiKey",
      "name": "Token",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ]
}`))
}
