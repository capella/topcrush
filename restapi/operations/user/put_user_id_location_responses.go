// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/capella/topcrush/models"
)

// PutUserIDLocationCreatedCode is the HTTP code returned for type PutUserIDLocationCreated
const PutUserIDLocationCreatedCode int = 201

/*PutUserIDLocationCreated Update

swagger:response putUserIdLocationCreated
*/
type PutUserIDLocationCreated struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPutUserIDLocationCreated creates PutUserIDLocationCreated with default headers values
func NewPutUserIDLocationCreated() *PutUserIDLocationCreated {

	return &PutUserIDLocationCreated{}
}

// WithPayload adds the payload to the put user Id location created response
func (o *PutUserIDLocationCreated) WithPayload(payload *models.User) *PutUserIDLocationCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id location created response
func (o *PutUserIDLocationCreated) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDLocationCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutUserIDLocationForbiddenCode is the HTTP code returned for type PutUserIDLocationForbidden
const PutUserIDLocationForbiddenCode int = 403

/*PutUserIDLocationForbidden Forbidde

swagger:response putUserIdLocationForbidden
*/
type PutUserIDLocationForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutUserIDLocationForbidden creates PutUserIDLocationForbidden with default headers values
func NewPutUserIDLocationForbidden() *PutUserIDLocationForbidden {

	return &PutUserIDLocationForbidden{}
}

// WithPayload adds the payload to the put user Id location forbidden response
func (o *PutUserIDLocationForbidden) WithPayload(payload *models.Error) *PutUserIDLocationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user Id location forbidden response
func (o *PutUserIDLocationForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDLocationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutUserIDLocationDefault generic error response

swagger:response putUserIdLocationDefault
*/
type PutUserIDLocationDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutUserIDLocationDefault creates PutUserIDLocationDefault with default headers values
func NewPutUserIDLocationDefault(code int) *PutUserIDLocationDefault {
	if code <= 0 {
		code = 500
	}

	return &PutUserIDLocationDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put user ID location default response
func (o *PutUserIDLocationDefault) WithStatusCode(code int) *PutUserIDLocationDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put user ID location default response
func (o *PutUserIDLocationDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put user ID location default response
func (o *PutUserIDLocationDefault) WithPayload(payload *models.Error) *PutUserIDLocationDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put user ID location default response
func (o *PutUserIDLocationDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutUserIDLocationDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
