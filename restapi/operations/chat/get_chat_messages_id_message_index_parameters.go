// Code generated by go-swagger; DO NOT EDIT.

package chat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetChatMessagesIDMessageIndexParams creates a new GetChatMessagesIDMessageIndexParams object
// no default values defined in spec.
func NewGetChatMessagesIDMessageIndexParams() GetChatMessagesIDMessageIndexParams {

	return GetChatMessagesIDMessageIndexParams{}
}

// GetChatMessagesIDMessageIndexParams contains all the bound params for the get chat messages ID message index operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetChatMessagesIDMessageIndex
type GetChatMessagesIDMessageIndexParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*chat id
	  Required: true
	  In: path
	*/
	ID int64
	/*this is last retrived message
	  Required: true
	  Minimum: 0
	  In: path
	*/
	MessageIndex uint64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetChatMessagesIDMessageIndexParams() beforehand.
func (o *GetChatMessagesIDMessageIndexParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	rMessageIndex, rhkMessageIndex, _ := route.Params.GetOK("messageIndex")
	if err := o.bindMessageIndex(rMessageIndex, rhkMessageIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetChatMessagesIDMessageIndexParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "path", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindMessageIndex binds and validates parameter MessageIndex from path.
func (o *GetChatMessagesIDMessageIndexParams) bindMessageIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertUint64(raw)
	if err != nil {
		return errors.InvalidType("messageIndex", "path", "uint64", raw)
	}
	o.MessageIndex = value

	if err := o.validateMessageIndex(formats); err != nil {
		return err
	}

	return nil
}

// validateMessageIndex carries on validations for parameter MessageIndex
func (o *GetChatMessagesIDMessageIndexParams) validateMessageIndex(formats strfmt.Registry) error {

	if err := validate.MinimumInt("messageIndex", "path", int64(o.MessageIndex), 0, false); err != nil {
		return err
	}

	return nil
}
