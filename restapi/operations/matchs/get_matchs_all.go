// Code generated by go-swagger; DO NOT EDIT.

package matchs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/capella/topcrush/models"
)

// GetMatchsAllHandlerFunc turns a function with the right signature into a get matchs all handler
type GetMatchsAllHandlerFunc func(GetMatchsAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMatchsAllHandlerFunc) Handle(params GetMatchsAllParams) middleware.Responder {
	return fn(params)
}

// GetMatchsAllHandler interface for that can handle valid get matchs all params
type GetMatchsAllHandler interface {
	Handle(GetMatchsAllParams) middleware.Responder
}

// NewGetMatchsAll creates a new http.Handler for the get matchs all operation
func NewGetMatchsAll(ctx *middleware.Context, handler GetMatchsAllHandler) *GetMatchsAll {
	return &GetMatchsAll{Context: ctx, Handler: handler}
}

/*GetMatchsAll swagger:route GET /matchs/all matchs getMatchsAll

return a list of all matchs

*/
type GetMatchsAll struct {
	Context *middleware.Context
	Handler GetMatchsAllHandler
}

func (o *GetMatchsAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMatchsAllParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMatchsAllCreatedBodyItems0 get matchs all created body items0
// swagger:model GetMatchsAllCreatedBodyItems0
type GetMatchsAllCreatedBodyItems0 struct {

	// chat ID
	// Format: ObjectId
	ChatID strfmt.ObjectId `json:"chatID,omitempty"`

	// user
	User *models.UserPublic `json:"user,omitempty"`
}

// Validate validates this get matchs all created body items0
func (o *GetMatchsAllCreatedBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChatID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMatchsAllCreatedBodyItems0) validateChatID(formats strfmt.Registry) error {

	if swag.IsZero(o.ChatID) { // not required
		return nil
	}

	if err := validate.FormatOf("chatID", "body", "ObjectId", o.ChatID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetMatchsAllCreatedBodyItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMatchsAllCreatedBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMatchsAllCreatedBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetMatchsAllCreatedBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
