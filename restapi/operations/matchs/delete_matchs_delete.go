// Code generated by go-swagger; DO NOT EDIT.

package matchs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/capella/topcrush/models"
)

// DeleteMatchsDeleteHandlerFunc turns a function with the right signature into a delete matchs delete handler
type DeleteMatchsDeleteHandlerFunc func(DeleteMatchsDeleteParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMatchsDeleteHandlerFunc) Handle(params DeleteMatchsDeleteParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteMatchsDeleteHandler interface for that can handle valid delete matchs delete params
type DeleteMatchsDeleteHandler interface {
	Handle(DeleteMatchsDeleteParams, *models.Principal) middleware.Responder
}

// NewDeleteMatchsDelete creates a new http.Handler for the delete matchs delete operation
func NewDeleteMatchsDelete(ctx *middleware.Context, handler DeleteMatchsDeleteHandler) *DeleteMatchsDelete {
	return &DeleteMatchsDelete{Context: ctx, Handler: handler}
}

/*DeleteMatchsDelete swagger:route DELETE /matchs/delete matchs deleteMatchsDelete

umatch user

*/
type DeleteMatchsDelete struct {
	Context *middleware.Context
	Handler DeleteMatchsDeleteHandler
}

func (o *DeleteMatchsDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteMatchsDeleteParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
