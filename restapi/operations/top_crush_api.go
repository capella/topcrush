// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/capella/topcrush/restapi/operations/chat"
	"github.com/capella/topcrush/restapi/operations/matchs"
	"github.com/capella/topcrush/restapi/operations/slide"
	"github.com/capella/topcrush/restapi/operations/user"

	models "github.com/capella/topcrush/models"
)

// NewTopCrushAPI creates a new TopCrush instance
func NewTopCrushAPI(spec *loads.Document) *TopCrushAPI {
	return &TopCrushAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		MatchsDeleteMatchsDeleteHandler: matchs.DeleteMatchsDeleteHandlerFunc(func(params matchs.DeleteMatchsDeleteParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MatchsDeleteMatchsDelete has not yet been implemented")
		}),
		ChatGetChatMessagesIDMessageIndexHandler: chat.GetChatMessagesIDMessageIndexHandlerFunc(func(params chat.GetChatMessagesIDMessageIndexParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ChatGetChatMessagesIDMessageIndex has not yet been implemented")
		}),
		MatchsGetMatchsAllHandler: matchs.GetMatchsAllHandlerFunc(func(params matchs.GetMatchsAllParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MatchsGetMatchsAll has not yet been implemented")
		}),
		MatchsGetMatchsLikesHandler: matchs.GetMatchsLikesHandlerFunc(func(params matchs.GetMatchsLikesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation MatchsGetMatchsLikes has not yet been implemented")
		}),
		SlideGetSlideUsersHandler: slide.GetSlideUsersHandlerFunc(func(params slide.GetSlideUsersParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SlideGetSlideUsers has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserGetUser has not yet been implemented")
		}),
		UserGetUserIDUploadHandler: user.GetUserIDUploadHandlerFunc(func(params user.GetUserIDUploadParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserGetUserIDUpload has not yet been implemented")
		}),
		UserPostUserHandler: user.PostUserHandlerFunc(func(params user.PostUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserPostUser has not yet been implemented")
		}),
		ChatPutChatMessagesIDHandler: chat.PutChatMessagesIDHandlerFunc(func(params chat.PutChatMessagesIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ChatPutChatMessagesID has not yet been implemented")
		}),
		SlidePutSlideBoastHandler: slide.PutSlideBoastHandlerFunc(func(params slide.PutSlideBoastParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SlidePutSlideBoast has not yet been implemented")
		}),
		SlidePutSlideLikeHandler: slide.PutSlideLikeHandlerFunc(func(params slide.PutSlideLikeParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SlidePutSlideLike has not yet been implemented")
		}),
		SlidePutSlideSuperlikeHandler: slide.PutSlideSuperlikeHandlerFunc(func(params slide.PutSlideSuperlikeParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation SlidePutSlideSuperlike has not yet been implemented")
		}),
		UserPutUserIDHandler: user.PutUserIDHandlerFunc(func(params user.PutUserIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserPutUserID has not yet been implemented")
		}),
		UserPutUserIDLocationHandler: user.PutUserIDLocationHandlerFunc(func(params user.PutUserIDLocationParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserPutUserIDLocation has not yet been implemented")
		}),

		// Applies when the "Token" header is set
		APIKeyAuthAuth: func(token string) (*models.Principal, error) {
			return nil, errors.NotImplemented("api key auth (ApiKeyAuth) Token from header param [Token] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*TopCrushAPI the top crush API */
type TopCrushAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// APIKeyAuthAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Token provided in the header
	APIKeyAuthAuth func(string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// MatchsDeleteMatchsDeleteHandler sets the operation handler for the delete matchs delete operation
	MatchsDeleteMatchsDeleteHandler matchs.DeleteMatchsDeleteHandler
	// ChatGetChatMessagesIDMessageIndexHandler sets the operation handler for the get chat messages ID message index operation
	ChatGetChatMessagesIDMessageIndexHandler chat.GetChatMessagesIDMessageIndexHandler
	// MatchsGetMatchsAllHandler sets the operation handler for the get matchs all operation
	MatchsGetMatchsAllHandler matchs.GetMatchsAllHandler
	// MatchsGetMatchsLikesHandler sets the operation handler for the get matchs likes operation
	MatchsGetMatchsLikesHandler matchs.GetMatchsLikesHandler
	// SlideGetSlideUsersHandler sets the operation handler for the get slide users operation
	SlideGetSlideUsersHandler slide.GetSlideUsersHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserGetUserIDUploadHandler sets the operation handler for the get user ID upload operation
	UserGetUserIDUploadHandler user.GetUserIDUploadHandler
	// UserPostUserHandler sets the operation handler for the post user operation
	UserPostUserHandler user.PostUserHandler
	// ChatPutChatMessagesIDHandler sets the operation handler for the put chat messages ID operation
	ChatPutChatMessagesIDHandler chat.PutChatMessagesIDHandler
	// SlidePutSlideBoastHandler sets the operation handler for the put slide boast operation
	SlidePutSlideBoastHandler slide.PutSlideBoastHandler
	// SlidePutSlideLikeHandler sets the operation handler for the put slide like operation
	SlidePutSlideLikeHandler slide.PutSlideLikeHandler
	// SlidePutSlideSuperlikeHandler sets the operation handler for the put slide superlike operation
	SlidePutSlideSuperlikeHandler slide.PutSlideSuperlikeHandler
	// UserPutUserIDHandler sets the operation handler for the put user ID operation
	UserPutUserIDHandler user.PutUserIDHandler
	// UserPutUserIDLocationHandler sets the operation handler for the put user ID location operation
	UserPutUserIDLocationHandler user.PutUserIDLocationHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *TopCrushAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *TopCrushAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *TopCrushAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *TopCrushAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *TopCrushAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *TopCrushAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *TopCrushAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the TopCrushAPI
func (o *TopCrushAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.APIKeyAuthAuth == nil {
		unregistered = append(unregistered, "TokenAuth")
	}

	if o.MatchsDeleteMatchsDeleteHandler == nil {
		unregistered = append(unregistered, "matchs.DeleteMatchsDeleteHandler")
	}

	if o.ChatGetChatMessagesIDMessageIndexHandler == nil {
		unregistered = append(unregistered, "chat.GetChatMessagesIDMessageIndexHandler")
	}

	if o.MatchsGetMatchsAllHandler == nil {
		unregistered = append(unregistered, "matchs.GetMatchsAllHandler")
	}

	if o.MatchsGetMatchsLikesHandler == nil {
		unregistered = append(unregistered, "matchs.GetMatchsLikesHandler")
	}

	if o.SlideGetSlideUsersHandler == nil {
		unregistered = append(unregistered, "slide.GetSlideUsersHandler")
	}

	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}

	if o.UserGetUserIDUploadHandler == nil {
		unregistered = append(unregistered, "user.GetUserIDUploadHandler")
	}

	if o.UserPostUserHandler == nil {
		unregistered = append(unregistered, "user.PostUserHandler")
	}

	if o.ChatPutChatMessagesIDHandler == nil {
		unregistered = append(unregistered, "chat.PutChatMessagesIDHandler")
	}

	if o.SlidePutSlideBoastHandler == nil {
		unregistered = append(unregistered, "slide.PutSlideBoastHandler")
	}

	if o.SlidePutSlideLikeHandler == nil {
		unregistered = append(unregistered, "slide.PutSlideLikeHandler")
	}

	if o.SlidePutSlideSuperlikeHandler == nil {
		unregistered = append(unregistered, "slide.PutSlideSuperlikeHandler")
	}

	if o.UserPutUserIDHandler == nil {
		unregistered = append(unregistered, "user.PutUserIDHandler")
	}

	if o.UserPutUserIDLocationHandler == nil {
		unregistered = append(unregistered, "user.PutUserIDLocationHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *TopCrushAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *TopCrushAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "ApiKeyAuth":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.APIKeyAuthAuth(token)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *TopCrushAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *TopCrushAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *TopCrushAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *TopCrushAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the top crush API
func (o *TopCrushAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *TopCrushAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/matchs/delete"] = matchs.NewDeleteMatchsDelete(o.context, o.MatchsDeleteMatchsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/chat/messages/{id}/{messageIndex}"] = chat.NewGetChatMessagesIDMessageIndex(o.context, o.ChatGetChatMessagesIDMessageIndexHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/matchs/all"] = matchs.NewGetMatchsAll(o.context, o.MatchsGetMatchsAllHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/matchs/likes"] = matchs.NewGetMatchsLikes(o.context, o.MatchsGetMatchsLikesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/slide/users"] = slide.NewGetSlideUsers(o.context, o.SlideGetSlideUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user.NewGetUser(o.context, o.UserGetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user/{id}/upload"] = user.NewGetUserIDUpload(o.context, o.UserGetUserIDUploadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = user.NewPostUser(o.context, o.UserPostUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/chat/messages/{id}"] = chat.NewPutChatMessagesID(o.context, o.ChatPutChatMessagesIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/slide/boast"] = slide.NewPutSlideBoast(o.context, o.SlidePutSlideBoastHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/slide/like"] = slide.NewPutSlideLike(o.context, o.SlidePutSlideLikeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/slide/superlike"] = slide.NewPutSlideSuperlike(o.context, o.SlidePutSlideSuperlikeHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}"] = user.NewPutUserID(o.context, o.UserPutUserIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/user/{id}/location"] = user.NewPutUserIDLocation(o.context, o.UserPutUserIDLocationHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *TopCrushAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *TopCrushAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *TopCrushAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *TopCrushAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
