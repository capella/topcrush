// Code generated by go-swagger; DO NOT EDIT.

package slide

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/capella/topcrush/models"
)

// PutSlideLikeCreatedCode is the HTTP code returned for type PutSlideLikeCreated
const PutSlideLikeCreatedCode int = 201

/*PutSlideLikeCreated like worked

swagger:response putSlideLikeCreated
*/
type PutSlideLikeCreated struct {

	/*
	  In: Body
	*/
	Payload models.Success `json:"body,omitempty"`
}

// NewPutSlideLikeCreated creates PutSlideLikeCreated with default headers values
func NewPutSlideLikeCreated() *PutSlideLikeCreated {

	return &PutSlideLikeCreated{}
}

// WithPayload adds the payload to the put slide like created response
func (o *PutSlideLikeCreated) WithPayload(payload models.Success) *PutSlideLikeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put slide like created response
func (o *PutSlideLikeCreated) SetPayload(payload models.Success) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSlideLikeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutSlideLikePaymentRequiredCode is the HTTP code returned for type PutSlideLikePaymentRequired
const PutSlideLikePaymentRequiredCode int = 402

/*PutSlideLikePaymentRequired no more likes

swagger:response putSlideLikePaymentRequired
*/
type PutSlideLikePaymentRequired struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutSlideLikePaymentRequired creates PutSlideLikePaymentRequired with default headers values
func NewPutSlideLikePaymentRequired() *PutSlideLikePaymentRequired {

	return &PutSlideLikePaymentRequired{}
}

// WithPayload adds the payload to the put slide like payment required response
func (o *PutSlideLikePaymentRequired) WithPayload(payload *models.Error) *PutSlideLikePaymentRequired {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put slide like payment required response
func (o *PutSlideLikePaymentRequired) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSlideLikePaymentRequired) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(402)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PutSlideLikeDefault generic error response

swagger:response putSlideLikeDefault
*/
type PutSlideLikeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutSlideLikeDefault creates PutSlideLikeDefault with default headers values
func NewPutSlideLikeDefault(code int) *PutSlideLikeDefault {
	if code <= 0 {
		code = 500
	}

	return &PutSlideLikeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the put slide like default response
func (o *PutSlideLikeDefault) WithStatusCode(code int) *PutSlideLikeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the put slide like default response
func (o *PutSlideLikeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the put slide like default response
func (o *PutSlideLikeDefault) WithPayload(payload *models.Error) *PutSlideLikeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put slide like default response
func (o *PutSlideLikeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutSlideLikeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
