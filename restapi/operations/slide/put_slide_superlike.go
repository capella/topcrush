// Code generated by go-swagger; DO NOT EDIT.

package slide

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutSlideSuperlikeHandlerFunc turns a function with the right signature into a put slide superlike handler
type PutSlideSuperlikeHandlerFunc func(PutSlideSuperlikeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutSlideSuperlikeHandlerFunc) Handle(params PutSlideSuperlikeParams) middleware.Responder {
	return fn(params)
}

// PutSlideSuperlikeHandler interface for that can handle valid put slide superlike params
type PutSlideSuperlikeHandler interface {
	Handle(PutSlideSuperlikeParams) middleware.Responder
}

// NewPutSlideSuperlike creates a new http.Handler for the put slide superlike operation
func NewPutSlideSuperlike(ctx *middleware.Context, handler PutSlideSuperlikeHandler) *PutSlideSuperlike {
	return &PutSlideSuperlike{Context: ctx, Handler: handler}
}

/*PutSlideSuperlike swagger:route PUT /slide/superlike slide putSlideSuperlike

make a superlike

*/
type PutSlideSuperlike struct {
	Context *middleware.Context
	Handler PutSlideSuperlikeHandler
}

func (o *PutSlideSuperlike) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutSlideSuperlikeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
