// Code generated by go-swagger; DO NOT EDIT.

package slide

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/capella/topcrush/models"
)

// GetSlideUsersCreatedCode is the HTTP code returned for type GetSlideUsersCreated
const GetSlideUsersCreatedCode int = 201

/*GetSlideUsersCreated return a list of near users

swagger:response getSlideUsersCreated
*/
type GetSlideUsersCreated struct {

	/*
	  In: Body
	*/
	Payload []*models.UserPublic `json:"body,omitempty"`
}

// NewGetSlideUsersCreated creates GetSlideUsersCreated with default headers values
func NewGetSlideUsersCreated() *GetSlideUsersCreated {

	return &GetSlideUsersCreated{}
}

// WithPayload adds the payload to the get slide users created response
func (o *GetSlideUsersCreated) WithPayload(payload []*models.UserPublic) *GetSlideUsersCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get slide users created response
func (o *GetSlideUsersCreated) SetPayload(payload []*models.UserPublic) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSlideUsersCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserPublic, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetSlideUsersPaymentRequiredCode is the HTTP code returned for type GetSlideUsersPaymentRequired
const GetSlideUsersPaymentRequiredCode int = 402

/*GetSlideUsersPaymentRequired subscription requerid

swagger:response getSlideUsersPaymentRequired
*/
type GetSlideUsersPaymentRequired struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSlideUsersPaymentRequired creates GetSlideUsersPaymentRequired with default headers values
func NewGetSlideUsersPaymentRequired() *GetSlideUsersPaymentRequired {

	return &GetSlideUsersPaymentRequired{}
}

// WithPayload adds the payload to the get slide users payment required response
func (o *GetSlideUsersPaymentRequired) WithPayload(payload *models.Error) *GetSlideUsersPaymentRequired {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get slide users payment required response
func (o *GetSlideUsersPaymentRequired) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSlideUsersPaymentRequired) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(402)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetSlideUsersDefault generic error response

swagger:response getSlideUsersDefault
*/
type GetSlideUsersDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetSlideUsersDefault creates GetSlideUsersDefault with default headers values
func NewGetSlideUsersDefault(code int) *GetSlideUsersDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSlideUsersDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get slide users default response
func (o *GetSlideUsersDefault) WithStatusCode(code int) *GetSlideUsersDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get slide users default response
func (o *GetSlideUsersDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get slide users default response
func (o *GetSlideUsersDefault) WithPayload(payload *models.Error) *GetSlideUsersDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get slide users default response
func (o *GetSlideUsersDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSlideUsersDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
