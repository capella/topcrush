// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model user
type User struct {

	// id
	// Read Only: true
	// Format: ObjectId
	ID strfmt.ObjectId `json:"_id,omitempty"`

	// age
	Age int64 `json:"age,omitempty"`

	// birth date
	// Required: true
	// Format: date
	BirthDate *strfmt.Date `json:"birthDate"`

	// company
	// Max Length: 256
	Company string `json:"company,omitempty"`

	// description
	// Max Length: 4096
	Description string `json:"description,omitempty"`

	// full name
	// Required: true
	// Max Length: 256
	// Min Length: 10
	FullName *string `json:"fullName"`

	// gender
	// Required: true
	// Enum: [male female]
	Gender interface{} `json:"gender"`

	// images
	Images []*Images `json:"images"`

	// interest in
	// Required: true
	// Enum: [male female]
	InterestIn interface{} `json:"interestIn"`

	// job title
	// Max Length: 256
	JobTitle string `json:"jobTitle,omitempty"`

	// is the last time the user change it birthDate, user cannot change it a high frequency
	// Format: date
	LastBirthDateChange strfmt.Date `json:"lastBirthDateChange,omitempty"`

	// last position
	LastPosition *Position `json:"lastPosition,omitempty"`

	// distance in km to find matches
	// Required: true
	// Maximum: 30
	// Minimum: 1
	Radio *uint64 `json:"radio"`

	// school
	// Max Length: 256
	School string `json:"school,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterestIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastBirthDateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("_id", "body", "ObjectId", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateBirthDate(formats strfmt.Registry) error {

	if err := validate.Required("birthDate", "body", m.BirthDate); err != nil {
		return err
	}

	if err := validate.FormatOf("birthDate", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("company", "body", string(m.Company), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4096); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("fullName", "body", m.FullName); err != nil {
		return err
	}

	if err := validate.MinLength("fullName", "body", string(*m.FullName), 10); err != nil {
		return err
	}

	if err := validate.MaxLength("fullName", "body", string(*m.FullName), 256); err != nil {
		return err
	}

	return nil
}

var userTypeGenderPropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["male","female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeGenderPropEnum = append(userTypeGenderPropEnum, v)
	}
}

// prop value enum
func (m *User) validateGenderEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, userTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateGender(formats strfmt.Registry) error {

	if err := validate.Required("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *User) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userTypeInterestInPropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["male","female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeInterestInPropEnum = append(userTypeInterestInPropEnum, v)
	}
}

// prop value enum
func (m *User) validateInterestInEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, userTypeInterestInPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *User) validateInterestIn(formats strfmt.Registry) error {

	if err := validate.Required("interestIn", "body", m.InterestIn); err != nil {
		return err
	}

	return nil
}

func (m *User) validateJobTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if err := validate.MaxLength("jobTitle", "body", string(m.JobTitle), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastBirthDateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.LastBirthDateChange) { // not required
		return nil
	}

	if err := validate.FormatOf("lastBirthDateChange", "body", "date", m.LastBirthDateChange.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPosition) { // not required
		return nil
	}

	if m.LastPosition != nil {
		if err := m.LastPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPosition")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateRadio(formats strfmt.Registry) error {

	if err := validate.Required("radio", "body", m.Radio); err != nil {
		return err
	}

	if err := validate.MinimumInt("radio", "body", int64(*m.Radio), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("radio", "body", int64(*m.Radio), 30, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateSchool(formats strfmt.Registry) error {

	if swag.IsZero(m.School) { // not required
		return nil
	}

	if err := validate.MaxLength("school", "body", string(m.School), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
