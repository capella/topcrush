// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPrivate user private
// swagger:model userPrivate
type UserPrivate struct {
	UserBasic

	// birth date
	// Format: date
	BirthDate strfmt.Date `json:"birthDate,omitempty"`

	// boasts
	// Read Only: true
	Boasts []strfmt.DateTime `json:"boasts"`

	// is the last time the user change it birthDate, user cannot change it a high frequency
	// Read Only: true
	// Format: date
	LastBirthDateChange strfmt.Date `json:"lastBirthDateChange,omitempty"`

	// last position
	LastPosition *Position `json:"lastPosition,omitempty"`

	// matchs
	// Read Only: true
	Matchs []*UserPrivateMatchsItems0 `json:"matchs"`

	// distance in km to find matches
	// Maximum: 30
	// Minimum: 1
	Radio uint64 `json:"radio,omitempty"`

	// remaning boasts
	// Read Only: true
	RemaningBoasts int64 `json:"remaningBoasts,omitempty"`

	// remaning likes
	// Read Only: true
	RemaningLikes int64 `json:"remaningLikes,omitempty"`

	// remaning superlikes
	// Read Only: true
	RemaningSuperlikes int64 `json:"remaningSuperlikes,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *UserPrivate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 UserBasic
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.UserBasic = aO0

	// AO1
	var dataAO1 struct {
		BirthDate strfmt.Date `json:"birthDate,omitempty"`

		Boasts []strfmt.DateTime `json:"boasts"`

		LastBirthDateChange strfmt.Date `json:"lastBirthDateChange,omitempty"`

		LastPosition *Position `json:"lastPosition,omitempty"`

		Matchs []*UserPrivateMatchsItems0 `json:"matchs"`

		Radio uint64 `json:"radio,omitempty"`

		RemaningBoasts int64 `json:"remaningBoasts,omitempty"`

		RemaningLikes int64 `json:"remaningLikes,omitempty"`

		RemaningSuperlikes int64 `json:"remaningSuperlikes,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BirthDate = dataAO1.BirthDate

	m.Boasts = dataAO1.Boasts

	m.LastBirthDateChange = dataAO1.LastBirthDateChange

	m.LastPosition = dataAO1.LastPosition

	m.Matchs = dataAO1.Matchs

	m.Radio = dataAO1.Radio

	m.RemaningBoasts = dataAO1.RemaningBoasts

	m.RemaningLikes = dataAO1.RemaningLikes

	m.RemaningSuperlikes = dataAO1.RemaningSuperlikes

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m UserPrivate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.UserBasic)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		BirthDate strfmt.Date `json:"birthDate,omitempty"`

		Boasts []strfmt.DateTime `json:"boasts"`

		LastBirthDateChange strfmt.Date `json:"lastBirthDateChange,omitempty"`

		LastPosition *Position `json:"lastPosition,omitempty"`

		Matchs []*UserPrivateMatchsItems0 `json:"matchs"`

		Radio uint64 `json:"radio,omitempty"`

		RemaningBoasts int64 `json:"remaningBoasts,omitempty"`

		RemaningLikes int64 `json:"remaningLikes,omitempty"`

		RemaningSuperlikes int64 `json:"remaningSuperlikes,omitempty"`
	}

	dataAO1.BirthDate = m.BirthDate

	dataAO1.Boasts = m.Boasts

	dataAO1.LastBirthDateChange = m.LastBirthDateChange

	dataAO1.LastPosition = m.LastPosition

	dataAO1.Matchs = m.Matchs

	dataAO1.Radio = m.Radio

	dataAO1.RemaningBoasts = m.RemaningBoasts

	dataAO1.RemaningLikes = m.RemaningLikes

	dataAO1.RemaningSuperlikes = m.RemaningSuperlikes

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this user private
func (m *UserPrivate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with UserBasic
	if err := m.UserBasic.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoasts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastBirthDateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadio(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPrivate) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("birthDate", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPrivate) validateBoasts(formats strfmt.Registry) error {

	if swag.IsZero(m.Boasts) { // not required
		return nil
	}

	for i := 0; i < len(m.Boasts); i++ {

		if err := validate.FormatOf("boasts"+"."+strconv.Itoa(i), "body", "date-time", m.Boasts[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *UserPrivate) validateLastBirthDateChange(formats strfmt.Registry) error {

	if swag.IsZero(m.LastBirthDateChange) { // not required
		return nil
	}

	if err := validate.FormatOf("lastBirthDateChange", "body", "date", m.LastBirthDateChange.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPrivate) validateLastPosition(formats strfmt.Registry) error {

	if swag.IsZero(m.LastPosition) { // not required
		return nil
	}

	if m.LastPosition != nil {
		if err := m.LastPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastPosition")
			}
			return err
		}
	}

	return nil
}

func (m *UserPrivate) validateMatchs(formats strfmt.Registry) error {

	if swag.IsZero(m.Matchs) { // not required
		return nil
	}

	for i := 0; i < len(m.Matchs); i++ {
		if swag.IsZero(m.Matchs[i]) { // not required
			continue
		}

		if m.Matchs[i] != nil {
			if err := m.Matchs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPrivate) validateRadio(formats strfmt.Registry) error {

	if swag.IsZero(m.Radio) { // not required
		return nil
	}

	if err := validate.MinimumInt("radio", "body", int64(m.Radio), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("radio", "body", int64(m.Radio), 30, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPrivate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPrivate) UnmarshalBinary(b []byte) error {
	var res UserPrivate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UserPrivateMatchsItems0 user private matchs items0
// swagger:model UserPrivateMatchsItems0
type UserPrivateMatchsItems0 struct {

	// chat ID
	// Format: ObjectId
	ChatID strfmt.ObjectId `json:"chatID,omitempty"`

	// match user id
	// Format: ObjectId
	UserID strfmt.ObjectId `json:"userID,omitempty"`
}

// Validate validates this user private matchs items0
func (m *UserPrivateMatchsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChatID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPrivateMatchsItems0) validateChatID(formats strfmt.Registry) error {

	if swag.IsZero(m.ChatID) { // not required
		return nil
	}

	if err := validate.FormatOf("chatID", "body", "ObjectId", m.ChatID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserPrivateMatchsItems0) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("userID", "body", "ObjectId", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPrivateMatchsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPrivateMatchsItems0) UnmarshalBinary(b []byte) error {
	var res UserPrivateMatchsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
