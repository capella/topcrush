// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Principal save user session information
// swagger:model principal
type Principal struct {

	// auth mode
	// Enum: [AccountKit Facebook]
	AuthMode string `json:"authMode,omitempty"`

	// facebook ID
	FacebookID string `json:"facebookID,omitempty"`

	// facebook token
	FacebookToken string `json:"facebookToken,omitempty"`
}

// Validate validates this principal
func (m *Principal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var principalTypeAuthModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AccountKit","Facebook"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		principalTypeAuthModePropEnum = append(principalTypeAuthModePropEnum, v)
	}
}

const (

	// PrincipalAuthModeAccountKit captures enum value "AccountKit"
	PrincipalAuthModeAccountKit string = "AccountKit"

	// PrincipalAuthModeFacebook captures enum value "Facebook"
	PrincipalAuthModeFacebook string = "Facebook"
)

// prop value enum
func (m *Principal) validateAuthModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, principalTypeAuthModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Principal) validateAuthMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthModeEnum("authMode", "body", m.AuthMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Principal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Principal) UnmarshalBinary(b []byte) error {
	var res Principal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
